<!DOCTYPE html>
<html lang="en">
<head>    
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
  <link href="style.css" rel="stylesheet">
  

  </head>
</head>
<body>


    <nav class="navbar navbar-expand-md navbar-dark bg-dark" aria-label="Fourth navbar example">
        <div class="container-fluid">
          <a class="navbar-brand" href="#">Knowledge Repository Hub</a>
          <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarsExample04" aria-controls="navbarsExample04" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
          </button>
    
          <div class="collapse navbar-collapse" id="navbarsExample04">
            <ul class="navbar-nav me-auto mb-2 mb-md-0">
              <li class="nav-item">
                <a class="nav-link active home" data-translate="homef" aria-current="page" href="/">Home</a>
              </li>
              <li class="nav-item">
                <a class="nav-link login" href="/login">Login</a>
              </li>
              <!-- <li class="nav-item">
                <a class="nav-link" href="/register">Register</a>
              </li> -->
              <!-- <li class="nav-item">
                <a class="nav-link disabled" aria-disabled="true">Disabled</a>
              </li>
              <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" href="#" data-bs-toggle="dropdown" aria-expanded="false">Dropdown</a>
                <ul class="dropdown-menu">
                  <li><a class="dropdown-item" href="#">Action</a></li>
                  <li><a class="dropdown-item" href="#">Another action</a></li>
                  <li><a class="dropdown-item" href="#">Something else here</a></li>
                </ul>
              </li> -->
            </ul>
            <div>
              <button class="flag-button" data-language="en">
                <img
                src="https://flagcdn.com/gb.svg"
                width="30"
                alt="United Kingdom">
              </button>
              <button class="flag-button" data-language="ro">
                <img
                src="https://flagcdn.com/md.svg"
                width="30"
                alt="Moldova"> 
              </button>

          </div>
            <form role="search">
              <input 
                class="form-control" 
                type="search" 
                placeholder="Search" 
                aria-label="Search" 
                value="<%= search || '' %>">
            </form>
            
          </div>
        </div>
      </nav>

    
<!-- Outer container for centering -->
<div class="d-flex justify-content-center align-items-center min-vh-100">
  <div class="container">
    <!-- <div class="row mb-3 text-center">
      <div class="col-3 themed-grid-col name">Name</div>
      <div class="col-3 themed-grid-col sirname">Sirname</div>
      <div class="col-3 themed-grid-col specialization">Specialization</div>
      <div class="col-3 themed-grid-col email">Email</div>
    </div> -->
  
    <% function highlightMatch(text, search) { %>
      <% if (search && search.length > 0) { %>
        <%- text.replace(new RegExp(search, 'gi'), match => `<mark>${match}</mark>`) %>
      <% } else { %>
        <%- text %>
      <% } %>
    <% } %>
    
    <table class="table table-striped">
      <thead>
          <tr>
              <th data-translate="Name">Name</th>
              
              <th data-translate="Sirname">Sirname</th>
              <th data-translate="Specialization">Specialization</th>
              <th>Email</th>
              <th data-translate="Nationallity">Nationallity</th>
          </tr>
      </thead>
      <tbody id="staff-table-body">
      <% scientificStaff.forEach(function(staff) { %>
          <tr>
              <td><%- highlightMatch(staff.Name, search) %></td>
              <td><%- highlightMatch(staff.Sirname, search) %></td>
              <td><%- highlightMatch(staff.Specialization, search) %></td>
              <td><%- highlightMatch(staff.Email, search) %></td>
              <td><%- highlightMatch(staff.Nationallity, search) %></td>
              <td>

          </tr>
      <% }); %>
      </tbody>
  </table>
  
<!-- Pagination Controls -->
<nav aria-label="Page navigation" class="mt-4">
  <ul class="pagination justify-content-center">
    <% if (currentPage > 1) { %>
      <li class="page-item">
        <a class="page-link prev" href="/mainPublic?page=<%= currentPage - 1 %>&limit=<%= limit %>">Previous</a>
      </li>
    <% } %>

    <% pages.forEach(function(page) { %>
      <li class="page-item <%= page.active ? 'active' : '' %>">
        <a class="page-link" href="/mainPublic?page=<%= page.number %>&limit=<%= limit %>&search=<%= search %>"><%= page.number %></a>
      </li>
    <% }); %>

    <% if (currentPage < pageCount) { %>
      <li class="page-item">
        <a class="page-link next" href="/mainPublic?page=<%= currentPage + 1 %>&limit=<%= limit %>">Next</a>
      </li>
    <% } %>
  </ul>
</nav>

</div>
  

</div>




  
  <!-- </div> -->

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
  <script>
    
  document.querySelector('input[type="search"]').addEventListener("input", async function (e) {
    const query = e.target.value.trim();

    if (query.length >= 2 || query.length === 0) { // Search on >=2 chars or clear on empty
      try {
        const response = await fetch(`/mainPublic?search=${encodeURIComponent(query)}&limit=10`);
        const html = await response.text();

        // Parse the response and update the page
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, "text/html");
        const newContent = doc.querySelector(".container"); // Adjust selector to your main results container

        document.querySelector(".container").replaceWith(newContent);
      } catch (error) {
        console.error("Error fetching search results:", error);
      }
    }
  });




  </script>

  
   
    <script src="translations.js"></script>
    <script src="index.js"></script>

  <script>
document.addEventListener("DOMContentLoaded", function () {
    // Check if language is saved in localStorage, otherwise default to 'en'
    let currentLang = localStorage.getItem('language') || 'en'; // Default to 'en' if no language is saved

    // Function to update the pagination text
    function updatePaginationText() {
        const prevButton = document.querySelector('.page-link.prev');
        const nextButton = document.querySelector('.page-link.next');

        // Update the "Previous" button text only if it exists
        if (prevButton) {
            if (currentLang === 'ro') {
                prevButton.textContent = 'Anterior';
            } else {
                prevButton.textContent = 'Previous';
            }
        }

        // Update the "Next" button text only if it exists
        if (nextButton) {
            if (currentLang === 'ro') {
                nextButton.textContent = 'UrmÄƒtorul';
            } else {
                nextButton.textContent = 'Next';
            }
        }
    }

    // Function to update the text of elements with data-translate attribute
    function updateTranslations() {
        const translateElements = document.querySelectorAll('[data-translate]');
        translateElements.forEach(el => {
            const key = el.getAttribute('data-translate');
            const translation = translations[currentLang][key] || key; // Fallback to key if no translation found
            el.textContent = translation;
        });
    }

    // Check periodically if the pagination buttons are available (polling)
    function checkPaginationButtons() {
        const prevButton = document.querySelector('.page-link.prev');
        const nextButton = document.querySelector('.page-link.next');

        // If either prev or next button exists, update text
        if (prevButton || nextButton) {
            updatePaginationText();
        } else {
            setTimeout(checkPaginationButtons, 100); // Check again after 100ms
        }
    }

    // Start checking for pagination buttons when the DOM is fully loaded
    checkPaginationButtons();

    // Update translations when the DOM is loaded
    updateTranslations();

    // Update currentLang when a flag button is clicked
    document.querySelectorAll('.flag-button').forEach(button => {
        button.addEventListener('click', function () {
            currentLang = this.getAttribute('data-language');
            localStorage.setItem('language', currentLang); // Save the language preference in localStorage
            updatePaginationText(); // Update pagination text dynamically
            updateTranslations(); // Update translations dynamically
        });
    });
});



  </script>

</body>

</html>